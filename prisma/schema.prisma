// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------ Createing user model ---------------
model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  password           String
  role               UserRole  @default(GUEST)
  needPasswordChange Boolean   @default(true)
  status             UserStaus @default(ACTIVE)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  admin              Admin?
  guest              Guest?
  review             Review[]
  comment            Comment[]
  vote               Vote[]

  @@map("users")
}

//---------------- Admin Table----------------
model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleteAt    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

//---------------- GUEST Table----------------
model Guest {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleteAt    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user User @relation(fields: [email], references: [email])

  @@map("guests")
}

//---------------- Post Table----------------
model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  images      String
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  review      Review[]

  @@map("posts")
}

//---------------- Category Table----------------
model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

//---------------- Review Table----------------
model Review {
  id       String       @id @default(uuid())
  title    String
  content  String
  rating   Int
  images   String[]
  postId   String
  post     Post         @relation(fields: [postId], references: [id])
  authorId String
  author   User         @relation(fields: [authorId], references: [id])
  status   ReviewStatus @default(PENDING)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comment       Comment[]
  vote          Vote[]

  @@map("reviews")
}


//---------------- Comment Table----------------
model Comment {
  id        String   @id @default(uuid())
  content   String
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

//---------------- Vote Table----------------

model Vote {
  id       String @id @default(uuid())
  value    Int
  userId   String
  reviewId String
  user     User   @relation(fields: [userId], references: [id])
  review   Review @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId])
}



//-----User role------- 
enum UserRole {
  ADMIN
  GUEST
}

//-------Userstatus ---------
enum UserStaus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  UNPUBLISHED
}
